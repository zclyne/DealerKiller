import logging

from sqlalchemy import Engine, create_engine, select, text
from sqlalchemy.exc import NoResultFound
from sqlalchemy.orm import Session
from sqlalchemy.sql import exists

from .base import Base
from .conversation import Conversation
from .message import Message

logger = logging.getLogger(__name__)

# TODO: update engine with endpoint from config
default_engine = create_engine("sqlite+pysqlite:///:memory:", echo=True)
Base.metadata.create_all(default_engine)


def insert_conversation_if_not_exist(
    dealer_email: str, engine: Engine = default_engine
) -> bool:
    """insert a conversation with the given dealer_email if it doesn't exist

    Args:
        dealer_email (str): email address of the dealer
        engine (Engine, optional): Database engine. Defaults to default_engine.

    Returns:
        bool: whether the insertion happens successfully
    """
    with Session(engine) as session:
        if not session.query(
            exists().where(Conversation.dealer_email == dealer_email)
        ).scalar():
            logger.info(
                f"conversation with dealer_email {dealer_email} does not exist, creating"
            )
            conversation = Conversation(dealer_email=dealer_email)
            session.add(conversation)
            session.commit()
            logger.info(f"successfully inserted conversation, id={conversation.id}")
            return True
        else:
            return False


def insert_conversation(dealer_email: str, engine: Engine = default_engine):
    """insert a new conversation into the database

    Args:
        dealer_email (str): email address of the dealer
        engine (Engine, optional): Database engine. Defaults to default_engine.
    """
    conversation = Conversation(dealer_email=dealer_email)
    with Session(engine) as session:
        session.add(conversation)
        session.commit()
        logger.info(f"successfully inserted conversation, id={conversation.id}")


def get_conversation_by_email_address(
    dealer_email: str, engine: Engine = default_engine
) -> Conversation:
    stmt = select(Conversation).where(Conversation.dealer_email == dealer_email)
    with Session(engine) as session:
        try:
            result = session.scalars(stmt).one()
            return result
        except NoResultFound as e:
            logger.error(
                f"no result found for conversation with email_address={dealer_email}"
            )
            raise e


def insert_message(
    role: str, content: str, conversation_id: int, engine: Engine = default_engine
) -> Message:
    """insert a message into the database

    Args:
        role (str): llm role, either "system", "assistant" or "user"
        content (str): the content of the message
        conversation_id (int): the id of the conversation that the message is associated with
        engine (Engine, optional): Database engine. Defaults to default_engine.

    Returns:
        Message: the message object that is newly created
    """
    message = Message(
        conversation_id=conversation_id, role=role, content=content, status="draft"
    )

    with Session(engine) as session:
        session.add(message)
        session.commit()
        logger.info(f"successfully inserted message, id={message.id}")
        return message


def set_message_sent(message_id: int, engine: Engine = default_engine) -> None:
    """set the 'status' of the message to 'sent'
    This should be called when a message generated by LLM is actually sent to the dealer\

    Args:
        message_id (int): id of the message
        engine (Engine, optional): Database engine. Defaults to default_engine.
    """
    with Session(engine) as session:
        session.query(Message).filter(Message.id == message_id).update(
            {Message.status: "sent"}
        )
        session.commit()
        logger.info(f"successfully set status to 'sent' for message id={message_id}")


def get_message_by_id(message_id: int, engine: Engine = default_engine) -> Message:
    """get a message by message id

    Args:

        message_id (int): id of the message
        engine (Engine, optional): Database engine. Defaults to default_engine.

    Returns:
        Message: the message object
    """
    stmt = select(Message).where(Message.id == message_id)
    with Session(engine) as session:
        try:
            result = session.scalars(stmt).one()
            return result
        except NoResultFound as e:
            logger.error(f"no result found for message id={message_id}")
            raise e
